// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(WMSContext))]
    [Migration("20250405105909_AddedUserGroups")]
    partial class AddedUserGroups
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("API.Entities.ApprovalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovalStatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApprovalStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApprovalStatusName = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            ApprovalStatusName = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            ApprovalStatusName = "Denied"
                        });
                });

            modelBuilder.Entity("API.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DivisionDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Divisions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DivisionDescription = "Business Information Technology Services",
                            DivisionName = "BITS"
                        },
                        new
                        {
                            Id = 2,
                            DivisionDescription = "Office of Prisons",
                            DivisionName = "OOP"
                        },
                        new
                        {
                            Id = 3,
                            DivisionDescription = "Education",
                            DivisionName = "EDU"
                        },
                        new
                        {
                            Id = 4,
                            DivisionDescription = "Medical",
                            DivisionName = "MED"
                        },
                        new
                        {
                            Id = 5,
                            DivisionDescription = "Mental Health",
                            DivisionName = "MH"
                        });
                });

            modelBuilder.Entity("API.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Logan Bently",
                            Extension = "1234",
                            FirstName = "Logan",
                            Institution = "Institution 1",
                            LastName = "Bently",
                            Notes = "Notes 1",
                            Region = "Region 1",
                            ReportsTo = 2,
                            TeamId = 2
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Bob Newhart",
                            Extension = "5678",
                            FirstName = "Bob",
                            Institution = "Institution 2",
                            LastName = "Newhart",
                            Notes = "Notes 2",
                            Region = "Region 2",
                            ReportsTo = 6,
                            TeamId = 3,
                            UserGroupId = 1
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Steve Marshal",
                            Extension = "9101",
                            FirstName = "Steve",
                            Institution = "Institution 3",
                            LastName = "Marshal",
                            Notes = "Notes 3",
                            Region = "Region 3",
                            ReportsTo = 5,
                            TeamId = 2,
                            UserGroupId = 1
                        },
                        new
                        {
                            Id = 4,
                            DisplayName = "Michelle Rodriguez",
                            Extension = "1235",
                            FirstName = "Michelle",
                            Institution = "Institution 1",
                            LastName = "Rodriguez",
                            Notes = "Notes 1",
                            Region = "Region 1",
                            ReportsTo = 6,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 5,
                            DisplayName = "Kathy Renalds",
                            Extension = "5677",
                            FirstName = "Kathy",
                            Institution = "Institution 2",
                            LastName = "Renalds",
                            Notes = "Notes 2",
                            Region = "Region 2",
                            ReportsTo = 6,
                            TeamId = 4,
                            UserGroupId = 1
                        },
                        new
                        {
                            Id = 6,
                            DisplayName = "Dave Pennyworth",
                            Extension = "9102",
                            FirstName = "Dave",
                            Institution = "Institution 3",
                            LastName = "Pennyworth",
                            Notes = "Notes 3",
                            Region = "Region 3"
                        },
                        new
                        {
                            Id = 7,
                            DisplayName = "Lucy Lawless",
                            Extension = "1236",
                            FirstName = "Lucy",
                            Institution = "Institution 1",
                            LastName = "Lawless",
                            Notes = "Notes 1",
                            Region = "Region 1",
                            ReportsTo = 3,
                            TeamId = 1
                        },
                        new
                        {
                            Id = 8,
                            DisplayName = "Pete Rose",
                            Extension = "5679",
                            FirstName = "Pete",
                            Institution = "Institution 2",
                            LastName = "Rose",
                            Notes = "Notes 2",
                            Region = "Region 2",
                            ReportsTo = 2,
                            TeamId = 4
                        },
                        new
                        {
                            Id = 9,
                            DisplayName = "Ben Boss",
                            Extension = "9103",
                            FirstName = "Ben",
                            Institution = "Institution 3",
                            LastName = "Boss",
                            Notes = "Notes 3",
                            Region = "Region 3",
                            ReportsTo = 5,
                            TeamId = 1,
                            UserGroupId = 1
                        });
                });

            modelBuilder.Entity("API.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PriorityLevel = 0,
                            PriorityName = "Low"
                        },
                        new
                        {
                            Id = 2,
                            PriorityLevel = 0,
                            PriorityName = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            PriorityLevel = 0,
                            PriorityName = "High"
                        },
                        new
                        {
                            Id = 4,
                            PriorityLevel = 0,
                            PriorityName = "Critical"
                        });
                });

            modelBuilder.Entity("API.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ApprovalStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BoardDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeRuleNums")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DenialDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExplainCostSavings")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExplainImpact")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExternalUserCount")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("ImpactedClassifications")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ImpactedExternalJobTypes")
                        .HasColumnType("TEXT");

                    b.Property<int>("InternalUserCount")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("MandateBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MandateDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MandateTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NewAutomationExplain")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Objectives")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Policies")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ProposedImpDate")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("RelatedProjects")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequestStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequiredComplianceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendToBoard")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("hasStakeHolderConferred")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isNew")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("API.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestStatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RequestStatusName = "New"
                        },
                        new
                        {
                            Id = 2,
                            RequestStatusName = "In-Progress"
                        },
                        new
                        {
                            Id = 3,
                            RequestStatusName = "On-Hold"
                        },
                        new
                        {
                            Id = 4,
                            RequestStatusName = "Completed"
                        });
                });

            modelBuilder.Entity("API.Entities.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RequestTypeName = "Change Request"
                        },
                        new
                        {
                            Id = 2,
                            RequestTypeName = "Project Request"
                        },
                        new
                        {
                            Id = 3,
                            RequestTypeName = "Work Request"
                        });
                });

            modelBuilder.Entity("API.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DivisionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SectionDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DivisionId = 1,
                            SectionDescription = "Infrastructure and Operations",
                            SectionName = "Infrastructure"
                        },
                        new
                        {
                            Id = 2,
                            DivisionId = 1,
                            SectionDescription = "Networking and Communications",
                            SectionName = "Networking"
                        },
                        new
                        {
                            Id = 3,
                            DivisionId = 1,
                            SectionDescription = "Security Operations",
                            SectionName = "Security"
                        },
                        new
                        {
                            Id = 4,
                            DivisionId = 1,
                            SectionDescription = "Application Development",
                            SectionName = "AppDev"
                        });
                });

            modelBuilder.Entity("API.Entities.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StepDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StepOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("API.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SectionId = 4,
                            TeamDescription = "Maintenance",
                            TeamName = "Maintenance Team"
                        },
                        new
                        {
                            Id = 2,
                            SectionId = 4,
                            TeamDescription = "Cloud Services",
                            TeamName = "Cloud Team"
                        },
                        new
                        {
                            Id = 3,
                            SectionId = 4,
                            TeamDescription = "ORAS",
                            TeamName = "ORAS Team"
                        },
                        new
                        {
                            Id = 4,
                            SectionId = 4,
                            TeamDescription = "Forms",
                            TeamName = "Forms Team"
                        });
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Entities.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GroupDescription = "Team Managers",
                            GroupName = "TeamManager"
                        });
                });

            modelBuilder.Entity("API.Entities.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("WorkName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("API.Entities.WorkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardIDNum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("WorkId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PriorityId");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("API.Entities.WorkTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("TEXT");

                    b.Property<double>("Progress")
                        .HasColumnType("REAL");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("WorkItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isComplete")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WorkTasks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "BoardMember",
                            NormalizedName = "BOARDMEMBER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "ProjectManager",
                            NormalizedName = "PROJECTMANAGER"
                        },
                        new
                        {
                            Id = "5",
                            Name = "ChangeManager",
                            NormalizedName = "CHANGEMANAGER"
                        },
                        new
                        {
                            Id = "6",
                            Name = "ChangeCoordinator",
                            NormalizedName = "CHANGECOORDINATOR"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Tech",
                            NormalizedName = "TECH"
                        },
                        new
                        {
                            Id = "8",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = "9",
                            Name = "Team Manager",
                            NormalizedName = "TEAMMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Entities.Employee", b =>
                {
                    b.HasOne("API.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("API.Entities.UserGroup", "UserGroup")
                        .WithMany("Employees")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("API.Entities.Request", b =>
                {
                    b.HasOne("API.Entities.ApprovalStatus", "ApprovalStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusId");

                    b.HasOne("API.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("API.Entities.RequestStatus", "RequestStatus")
                        .WithMany()
                        .HasForeignKey("RequestStatusId");

                    b.HasOne("API.Entities.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Priority");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("API.Entities.Section", b =>
                {
                    b.HasOne("API.Entities.Division", "Division")
                        .WithMany("Sections")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("API.Entities.Step", b =>
                {
                    b.HasOne("API.Entities.WorkTask", null)
                        .WithMany("Steps")
                        .HasForeignKey("WorkTaskId");
                });

            modelBuilder.Entity("API.Entities.Team", b =>
                {
                    b.HasOne("API.Entities.Section", "Section")
                        .WithMany("Teams")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.HasOne("API.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Entities.WorkItem", b =>
                {
                    b.HasOne("API.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Work", null)
                        .WithMany("WorkItems")
                        .HasForeignKey("WorkId");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("API.Entities.WorkTask", b =>
                {
                    b.HasOne("API.Entities.WorkItem", null)
                        .WithMany("WorkTasks")
                        .HasForeignKey("WorkItemId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.Division", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("API.Entities.Section", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("API.Entities.UserGroup", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Entities.Work", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("API.Entities.WorkItem", b =>
                {
                    b.Navigation("WorkTasks");
                });

            modelBuilder.Entity("API.Entities.WorkTask", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
